// Code generated by MockGen. DO NOT EDIT.
// Source: business/pocket/storer/pocket_storer.go

// Package mock_storer is a generated GoMock package.
package mock_storer

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/muchlist/moneymagnet/business/pocket/model"
	data "github.com/muchlist/moneymagnet/pkg/data"
)

// MockPocketStorer is a mock of PocketStorer interface.
type MockPocketStorer struct {
	ctrl     *gomock.Controller
	recorder *MockPocketStorerMockRecorder
}

// MockPocketStorerMockRecorder is the mock recorder for MockPocketStorer.
type MockPocketStorerMockRecorder struct {
	mock *MockPocketStorer
}

// NewMockPocketStorer creates a new mock instance.
func NewMockPocketStorer(ctrl *gomock.Controller) *MockPocketStorer {
	mock := &MockPocketStorer{ctrl: ctrl}
	mock.recorder = &MockPocketStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocketStorer) EXPECT() *MockPocketStorerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPocketStorer) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPocketStorerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPocketStorer)(nil).Delete), ctx, id)
}

// DeletePocketUser mocks base method.
func (m *MockPocketStorer) DeletePocketUser(ctx context.Context, userID, pocketID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePocketUser", ctx, userID, pocketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePocketUser indicates an expected call of DeletePocketUser.
func (mr *MockPocketStorerMockRecorder) DeletePocketUser(ctx, userID, pocketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePocketUser", reflect.TypeOf((*MockPocketStorer)(nil).DeletePocketUser), ctx, userID, pocketID)
}

// Edit mocks base method.
func (m *MockPocketStorer) Edit(ctx context.Context, Pocket *model.Pocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, Pocket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockPocketStorerMockRecorder) Edit(ctx, Pocket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPocketStorer)(nil).Edit), ctx, Pocket)
}

// Find mocks base method.
func (m *MockPocketStorer) Find(ctx context.Context, owner uuid.UUID, filter data.Filters) ([]model.Pocket, data.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, owner, filter)
	ret0, _ := ret[0].([]model.Pocket)
	ret1, _ := ret[1].(data.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockPocketStorerMockRecorder) Find(ctx, owner, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPocketStorer)(nil).Find), ctx, owner, filter)
}

// FindUserPockets mocks base method.
func (m *MockPocketStorer) FindUserPockets(ctx context.Context, owner uuid.UUID, filter data.Filters) ([]model.Pocket, data.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPockets", ctx, owner, filter)
	ret0, _ := ret[0].([]model.Pocket)
	ret1, _ := ret[1].(data.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserPockets indicates an expected call of FindUserPockets.
func (mr *MockPocketStorerMockRecorder) FindUserPockets(ctx, owner, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPockets", reflect.TypeOf((*MockPocketStorer)(nil).FindUserPockets), ctx, owner, filter)
}

// GetByID mocks base method.
func (m *MockPocketStorer) GetByID(ctx context.Context, id uuid.UUID) (model.Pocket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Pocket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPocketStorerMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPocketStorer)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockPocketStorer) Insert(ctx context.Context, Pocket *model.Pocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, Pocket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPocketStorerMockRecorder) Insert(ctx, Pocket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPocketStorer)(nil).Insert), ctx, Pocket)
}

// InsertPocketUser mocks base method.
func (m *MockPocketStorer) InsertPocketUser(ctx context.Context, userIDs []uuid.UUID, pocketID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPocketUser", ctx, userIDs, pocketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPocketUser indicates an expected call of InsertPocketUser.
func (mr *MockPocketStorerMockRecorder) InsertPocketUser(ctx, userIDs, pocketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPocketUser", reflect.TypeOf((*MockPocketStorer)(nil).InsertPocketUser), ctx, userIDs, pocketID)
}

// UpdateBalance mocks base method.
func (m *MockPocketStorer) UpdateBalance(ctx context.Context, pocketID uuid.UUID, balance int64, isSetOperaton bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, pocketID, balance, isSetOperaton)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockPocketStorerMockRecorder) UpdateBalance(ctx, pocketID, balance, isSetOperaton interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockPocketStorer)(nil).UpdateBalance), ctx, pocketID, balance, isSetOperaton)
}

// WithinTransaction mocks base method.
func (m *MockPocketStorer) WithinTransaction(ctx context.Context, tFunc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", ctx, tFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MockPocketStorerMockRecorder) WithinTransaction(ctx, tFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MockPocketStorer)(nil).WithinTransaction), ctx, tFunc)
}

// MockPocketSaver is a mock of PocketSaver interface.
type MockPocketSaver struct {
	ctrl     *gomock.Controller
	recorder *MockPocketSaverMockRecorder
}

// MockPocketSaverMockRecorder is the mock recorder for MockPocketSaver.
type MockPocketSaverMockRecorder struct {
	mock *MockPocketSaver
}

// NewMockPocketSaver creates a new mock instance.
func NewMockPocketSaver(ctrl *gomock.Controller) *MockPocketSaver {
	mock := &MockPocketSaver{ctrl: ctrl}
	mock.recorder = &MockPocketSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocketSaver) EXPECT() *MockPocketSaverMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPocketSaver) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPocketSaverMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPocketSaver)(nil).Delete), ctx, id)
}

// DeletePocketUser mocks base method.
func (m *MockPocketSaver) DeletePocketUser(ctx context.Context, userID, pocketID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePocketUser", ctx, userID, pocketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePocketUser indicates an expected call of DeletePocketUser.
func (mr *MockPocketSaverMockRecorder) DeletePocketUser(ctx, userID, pocketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePocketUser", reflect.TypeOf((*MockPocketSaver)(nil).DeletePocketUser), ctx, userID, pocketID)
}

// Edit mocks base method.
func (m *MockPocketSaver) Edit(ctx context.Context, Pocket *model.Pocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", ctx, Pocket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockPocketSaverMockRecorder) Edit(ctx, Pocket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPocketSaver)(nil).Edit), ctx, Pocket)
}

// Insert mocks base method.
func (m *MockPocketSaver) Insert(ctx context.Context, Pocket *model.Pocket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, Pocket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPocketSaverMockRecorder) Insert(ctx, Pocket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPocketSaver)(nil).Insert), ctx, Pocket)
}

// InsertPocketUser mocks base method.
func (m *MockPocketSaver) InsertPocketUser(ctx context.Context, userIDs []uuid.UUID, pocketID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPocketUser", ctx, userIDs, pocketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPocketUser indicates an expected call of InsertPocketUser.
func (mr *MockPocketSaverMockRecorder) InsertPocketUser(ctx, userIDs, pocketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPocketUser", reflect.TypeOf((*MockPocketSaver)(nil).InsertPocketUser), ctx, userIDs, pocketID)
}

// UpdateBalance mocks base method.
func (m *MockPocketSaver) UpdateBalance(ctx context.Context, pocketID uuid.UUID, balance int64, isSetOperaton bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, pocketID, balance, isSetOperaton)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockPocketSaverMockRecorder) UpdateBalance(ctx, pocketID, balance, isSetOperaton interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockPocketSaver)(nil).UpdateBalance), ctx, pocketID, balance, isSetOperaton)
}

// WithinTransaction mocks base method.
func (m *MockPocketSaver) WithinTransaction(ctx context.Context, tFunc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTransaction", ctx, tFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTransaction indicates an expected call of WithinTransaction.
func (mr *MockPocketSaverMockRecorder) WithinTransaction(ctx, tFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTransaction", reflect.TypeOf((*MockPocketSaver)(nil).WithinTransaction), ctx, tFunc)
}

// MockPocketReader is a mock of PocketReader interface.
type MockPocketReader struct {
	ctrl     *gomock.Controller
	recorder *MockPocketReaderMockRecorder
}

// MockPocketReaderMockRecorder is the mock recorder for MockPocketReader.
type MockPocketReaderMockRecorder struct {
	mock *MockPocketReader
}

// NewMockPocketReader creates a new mock instance.
func NewMockPocketReader(ctrl *gomock.Controller) *MockPocketReader {
	mock := &MockPocketReader{ctrl: ctrl}
	mock.recorder = &MockPocketReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPocketReader) EXPECT() *MockPocketReaderMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockPocketReader) Find(ctx context.Context, owner uuid.UUID, filter data.Filters) ([]model.Pocket, data.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, owner, filter)
	ret0, _ := ret[0].([]model.Pocket)
	ret1, _ := ret[1].(data.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Find indicates an expected call of Find.
func (mr *MockPocketReaderMockRecorder) Find(ctx, owner, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPocketReader)(nil).Find), ctx, owner, filter)
}

// FindUserPockets mocks base method.
func (m *MockPocketReader) FindUserPockets(ctx context.Context, owner uuid.UUID, filter data.Filters) ([]model.Pocket, data.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPockets", ctx, owner, filter)
	ret0, _ := ret[0].([]model.Pocket)
	ret1, _ := ret[1].(data.Metadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindUserPockets indicates an expected call of FindUserPockets.
func (mr *MockPocketReaderMockRecorder) FindUserPockets(ctx, owner, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPockets", reflect.TypeOf((*MockPocketReader)(nil).FindUserPockets), ctx, owner, filter)
}

// GetByID mocks base method.
func (m *MockPocketReader) GetByID(ctx context.Context, id uuid.UUID) (model.Pocket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Pocket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPocketReaderMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPocketReader)(nil).GetByID), ctx, id)
}
